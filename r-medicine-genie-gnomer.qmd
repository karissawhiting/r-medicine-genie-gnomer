---
format: 
  revealjs: 
    theme:  [default, style.scss]
    transition: fade
    slide-number: true
execute:
  echo: true 
  output: asis
  freeze: auto
editor: source
---


```{r}
#| echo: false
#| results: false
set.seed(20230515)
 
knitr::opts_chunk$set(echo = TRUE, results = 'asis')

library(tidyverse)
library(gtsummary)
#library(synapser)
library(genieBPC)
library(gt)
library(gnomeR)

# let's check if reg gt tables work now. if so, ditch this
knit_print.gtsummary <- function(x, ...) {
   gtsummary::as_gt(x) |>
     gt::as_raw_html()
}

knit_print.gt_tbl <- function(x, ...) {
  gt::as_raw_html(x)
} 


registerS3method("knit_print", "gtsummary", knit_print.gtsummary)
registerS3method("knit_print", "gt_tbl", knit_print.gt_tbl)

#devtools::install_github("MSKCC-Epi-Bio/gnomeR")
# fill for font awesome icons
fa_fill <- "#606060"

genieBPC::set_synapse_credentials()


```

```{r}
#| echo: false
#| results: false
#| eval: false

nsclc_synapse_data <- pull_data_synapse("NSCLC", "v2.0-public")
save(nsclc_synapse_data, file = here::here("data", "nsclc_synapse_data.RData"))

```

```{r}
#| echo: false
#| results: false

load(here::here("data", "nsclc_synapse_data.RData"))

```

## Case Study

Using the cohort of patients who were diagnosed with Stage IV adenocarcinoma NSCLC, we will:


1) [Process data]{.emphasized} into a ***n patients*** x ***p alterations*** matrix of events (0 = no alteration, 1 = alteration)

2) [Summarize genomic alteration frequencies]{.emphasized} and analyze differences between males and females.


```{r }
nsclc_cohort <- create_analytic_cohort(
  data_synapse = nsclc_synapse_data$NSCLC_v2.0,
  stage_dx = c("Stage IV"),
  histology = "Adenocarcinoma",
  regimen_drugs =
    c("Carboplatin, Pemetrexed Disodium",
      "Cisplatin, Pemetrexed Disodium",
      "Bevacizumab, Carboplatin, Pemetrexed Disodium",
      "Bevacizumab, Cisplatin, Pemetrexed Disodium"),
  regimen_type = "Exact",
  regimen_order = 1,
  regimen_order_type = "within cancer",
  return_summary = TRUE
)

nsclc_cohort$cohort_pt_char %>%
  select(
         naaccr_sex_code) %>%
  tbl_summary() %>%
  bold_labels()
```



## Overview of Genomic Data

We will be processing and analyzing data on:


**1) Mutations**

```{r}
mutations <- nsclc_synapse_data$NSCLC_v2.0$mutations_extended
```

**1) Discrete Copy Number Alterations**

```{r}
cna <- nsclc_synapse_data$NSCLC_v2.0$cna
```

**1) Fusions**

```{r}
fusions <- nsclc_synapse_data$NSCLC_v2.0$fusions
```

::: aside

AACRA Data Guide: https://www.aacr.org/wp-content/uploads/2020/02/20200127_GENIE_Data_Guide_7.pdf

:::

# Processing Data {background-color="#007CBA" style="text-align: center;"}

## Issues When Processing Multi-Institutional Genomic Data
        
::: {.incremental}

1) [Multiple Samples Per Patient]{.emphasized}
    - We often need to select a single sample per patient for analyses
    
1)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies!
    
1)  [Cohort Inclusion]{.emphasized}
    -   Samples with no alterations may be dropped when pulling data
    
1) [Multi-Institutional Studies Use Several Gene Panels]{.emphasized}
    -   Samples may be sequenced using different panels therefore the non overlapping genes have to be annotated as missing

:::

:::{.notes}

1)  **Research Samples vs. IMPACT Samples**
    -   Some samples may be sequenced outside MSK or using different panels.
    -   [Check panels and annotate NAs accordingly]{.emphasized}
2)  **Cohort Inclusion**
    -   Samples with no alterations may be dropped when pulling data
    -   [Use `samples` arg of `create_gene_binary()` and check data]{.emphasized}
3)  **Data Formats & Gene Standards Often Inconsistent**
    -   Column names, data formats and gene names may differ between studies or even within studies!
    -   [Reformat data as necessary and check gene aliases (`recode_aliases = TRUE`)]{.emphasized}
4)  **Missing Data in Mutation Status**
    -   Mutation Status is sometimes missing data.
    -   [Check Mutation Status column]{.emphasized}
    
:::


## Select One Sample Per Patient

::: {.callout-note appearance="simple"}

1) [Multiple Samples Per Patient]{.emphasized}
    - We often need to select a single sample per patient for analyses
    
:::

:::: {.incremental}

- Patients can have many NGS values
- We can use `select_unique_ngs()` to choose 1 per patient
- If multiple match the criteria, a random sample taken


:::: 

## [|]{.emphasized} Select One Sample Per Patient {background-color="#fff2cc"}

::: {.callout-note appearance="simple"}

1) [Multiple Samples Per Patient]{.emphasized}
    - We often need to select a single sample per patient for analyses
    
:::

```{r}
#| echo: true

nrow(nsclc_cohort$cohort_ngs)

nsclc_samp <- select_unique_ngs(
  data_cohort = nsclc_cohort$cohort_ngs,
  oncotree_code = "LUAD",
  sample_type = "Metastasis",
  min_max_time = "max"
)

nrow(nsclc_samp)

```

![](images/coding-icons.png){.absolute bottom=0 left=0 width="100" height="65"}

## Format Data in Analysis-ready Matrix

::: {.incremental}

- Next we want to get our genomic data in an analysis-friendly format. 

- `create_gene_binary()` from {gnomeR} will give us a data frame of *n* patients by *p* alterations. 

- Alteration columns are denoted by the gene name if mutation (e.g. `TP53`) or gene name + .Amp, .fus, .Del (`TP53.Del`) for other alterations types.

- Each cell will have `0` if no alteration, `1` if altered, or `NA` if that gene was not tested in that patient. 

:::

```{r}
#| echo: false
#| message: false
#| include: false

cna_synapse_long <- gnomeR::pivot_cna_longer(nsclc_synapse_data$NSCLC_v2.0$cna)
reformat_fusions <- gnomeR::reformat_fusion(nsclc_synapse_data$NSCLC_v2.0$fusions)

nsclc_2_sample_panels <- nsclc_samp %>% 
  select(cpt_seq_assay_id, cpt_genie_sample_id) %>%
  rename(panel_id = cpt_seq_assay_id,
         sample_id = cpt_genie_sample_id) %>%
   mutate(panel_id = ifelse(!is.na(panel_id),
                               panel_id, "no"))

bin_mat <- gnomeR::create_gene_binary(
    mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
    cna = cna_synapse_long,
    fusion = reformat_fusions,
    samples = nsclc_2_sample_panels$sample_id,
    specify_panel = nsclc_2_sample_panels
  ) 
```

```{r }
#| echo: false
# sample of data
bin_mat[1:5, 1:7] %>% gt::gt()
```

## Get Data in Standardized Format

::: {.callout-note appearance="simple"}

2)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies!

:::

<br>

{gnomeR} functions are designed to work with standard alteration data formats used in common platforms like cBioPortal.

We need to reformat GENIE CNA and fusions data to get it into this standard format. 

## Get Data in Standardized Format

Format fusions to follow the cBioPortal standard:

[Before:]{.emphasized}

```{r}
#| echo: false

positions <- c(1, 4, 5)
nsclc_synapse_data$NSCLC_v2.0$fusions %>% 
  select(all_of(positions))%>%
  arrange(Tumor_Sample_Barcode) %>% 
  filter(Tumor_Sample_Barcode == "GENIE-MSK-P-0004827-T01-IM5") %>%
  gt::gt() %>% gt::tab_style(
  style = cell_fill(color = 'lightcyan'), locations = cells_body(
    rows = Fusion == "XPO1-USP34 fusion"
  ))
```

[After:]{.emphasized}

```{r }
reformat_fusions <- gnomeR::reformat_fusion(nsclc_synapse_data$NSCLC_v2.0$fusions)

```

```{r}
#| echo: false

reformat_fusions %>% head() %>% select(all_of(c(1, 2, 3, 6))) %>% gt::gt()

```



## Get Data in Standardized Format

Format CNA to follow the cBioPortal standard:

[Before:]{.emphasized}

```{r}
nsclc_synapse_data$NSCLC_v2.0$cna[1:5, 1:5] %>% gt()
```

[After:]{.emphasized}

```{r }
cna_synapse_long <- gnomeR::pivot_cna_longer(nsclc_synapse_data$NSCLC_v2.0$cna)

cna_synapse_long[1:5, ] %>%
  gt()
```


## [|]{.emphasized} Get Data in Standardized Format {background-color="#fff2cc"}

```{r}
reformat_fusions <- gnomeR::reformat_fusion(nsclc_synapse_data$NSCLC_v2.0$fusions)
cna_synapse_long <- gnomeR::pivot_cna_longer(nsclc_synapse_data$NSCLC_v2.0$cna)

```

![](images/coding-icons.png){.absolute bottom=0 left=0 width="100" height="65"}

## Format Data in Analysis-ready Matrix

- Data is now in standardized format and can be processed using {gnomeR}

- `create_gene_binary()` has arguments to help address remainig data processing issues including sample inclusion criteria, cross-institutional data inconsistencies, etc.

<br>

[Basic code:]{.emphasized}

```{r  }
#| echo: true
#| eval: false
gnomeR::create_gene_binary(
  mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions)
```

## Cohort Inclusion {auto-animate="true"}

::: {.callout-note appearance="simple"}

3)  [Cohort Inclusion]{.emphasized}
    -   Samples with no alterations may be dropped when pulling raw genomic data
    
`samples` argument will ensure all study IDs have a row in resulting analysis data, even if they are not present in genomic files

::: 

:::: {.columns}

::: {.column width="60%"}

```{r, `code-line-numbers`="2" }
#| echo: true
#| eval: false

gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = NULL,
  mutation = NULL,
  mut_type = NULL,
  cna = NULL,
  fusion = NULL,
  recode_aliases = NULL)
```

:::

::: {.column width="40%"}

```{r}
#| echo: false
nsclc_samp %>% select(cpt_seq_assay_id) %>% count(cpt_seq_assay_id)%>% gt::gt()
```
:::

::::

## Not All Patients Tested on Same Panel

::: {.callout-note appearance="simple"}

4) [Multi-Institutional Studies Use Several Gene Panels]{.emphasized}
    -   Samples may be sequenced using different panels therefore the non overlapping genes have to be annotated as missing

::: 

`specify_panels` argument can insert NAs when we know that gene was not tested for a specific set of patients. 


```{r, `code-line-numbers`="3" }
#| column-location: column-fragment
#| echo: true
#| eval: false

gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = nsclc_panels,
  mutation = NULL,
  mut_type = NULL,
  cna = NULL,
  fusion = NULL,
  recode_aliases = NULL)
```


## Not All Patients Tested on Same Panel

To use `specify_panels`, we first need to pass a dataframe indicating which patient IDs were sequenced on which panels:

```{r}
#| echo: true

nsclc_panels <- data.frame(
  sample_id = nsclc_samp$cpt_genie_sample_id,
  panel_id = nsclc_samp$cpt_seq_assay_id) %>% 
  mutate(panel_id = ifelse(!is.na(panel_id),
                               panel_id, "no"))

nsclc_panels %>% head() %>% gt()
```


## Not All Patients Tested on Same Panel

:::: {.columns}


::: {.column width="50%"}

```{r }
#| message: false
binmat1 <- gnomeR::create_gene_binary(
  nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = "no")

binmat1[1:5, 1:5] %>% gt()
```

:::

::: {.column width="50%"}

```{r }
#| message: false
binmat2 <- gnomeR::create_gene_binary(
  nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = nsclc_panels)

binmat2[1:5, 1:5] %>% gt() 
```

:::

::::



## Ensure Gene Names Are Consistent Across Studies {.scrollable}

::: {.callout-note appearance="simple"}

1)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies!
    
:::


```{r, `code-line-numbers`="8"}
#| eval: true

test <- gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  specify_panel = nsclc_panels,
  recode_aliases = "no")

test_recode <- gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  specify_panel = nsclc_panels,
  recode_aliases = "impact")
```

```{r}
ncol(test)
ncol(test_recode)

```

## Process Data: View messages

```{r, `code-line-numbers`="8" }
#| eval: true
#| echo: true
#| message: true
#| warning: true

gene_binary <-  gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  specify_panel = nsclc_panels,
  recode_aliases = "impact")

gene_binary %>%
  select(all_of(1:10))%>%
  slice(1:5) %>%
  gt()

```

  
# Analyzing Data {background-color="#007CBA" style="text-align: center;"}


## {genieBPC} + {gnomeR} Pipeline

![](images/genie-gnomer-pipline.png)



## Issues When Analyzing Multi-Institutional Genomic Data

::: {.incremental}

1) [Multiple Testing and False Positives]{.emphasized}
  - Very low prevalence genes are often not very informative. Choose a threshold (e.g. 1% or 5 %) _a prior_ to limit number of hypothesis tests. 
- Report q-value (adjusted for multiple testing)

2) [Limited Power To Detect Clinical Associations When Sparse Alterations]{.emphasized}
  - You may want to summarize on Alteration, Gene or Pathway Level
  
:::

## Case Study

We will use the processed binary data frame data (`gene_binary`) to summarize genomic alterations overall in the cohort, and by sex.

First we need to join clinical data on `sex` to genomic data

```{r}
#| output-location: column
#| 
patient_index <-  nsclc_cohort$cohort_ngs %>%
  select(record_id, cpt_genie_sample_id)

select_clinical <- nsclc_cohort$cohort_pt_char %>%
  select(record_id, naaccr_sex_code) %>%
  left_join(patient_index) 

gene_binary <- gene_binary %>% 
  left_join(select_clinical, by = c("sample_id"= "cpt_genie_sample_id")) %>%
  select(-record_id)

gene_binary <- gene_binary %>% 
  select(sample_id, naaccr_sex_code, everything())

gene_binary %>%
  select(naaccr_sex_code) %>%
  tbl_summary()
```


## Subset By a Prevalence Threshold


1) [Multiple Testing and False Positives]{.emphasized}
  - Very low prevalence genes are often not very informative. Choose a threshold (e.g. 1% or 5 %) _a prior_ to limit number of hypothesis tests. 


Use `subset_by_frequency()` to subset genes above a given threshold. `t` indicates a threshold between 0 (`t = .01`) and 100% (`t = .01`) prevalence. 

`other_vars` retains the clinical variable of interest in the resulting data set. 



```{r}
ncol(gene_binary)

nscl_subset <- gene_binary %>%
  subset_by_frequency(t = .1, other_vars = naaccr_sex_code)

ncol(nscl_subset)
```


## Subset by a Panel

Use `subset_by_panel()` to subset only genes in a given panel. 

```{r}
ncol(gene_binary)

nscl_subset_panel <- gene_binary %>%
  subset_by_panel(panel_id = 'IMPACT300', other_vars = naaccr_sex_code)

ncol(nscl_subset_panel)
```


## Summarize Alterations with tbl_genomic()

`tbl_genomic()` is a wrapper function for `gtsummary::tbl_summary()` specifically 
designed for presenting genomic data:

```{r}
#| output-location: column

nscl_subset %>% 
  select(-naaccr_sex_code) %>%
  tbl_genomic()
```

## Summarize Genes with tbl_genomic()

You may want to analyze on the gene level only. Use `summarize_by_gene()` first, 
then pass to `tbl_genomic()`:

```{r}
#| output-location: column

tbl_gene <- gene_binary %>%
  select(-naaccr_sex_code) %>%
  summarize_by_gene() %>%
  subset_by_frequency(t = .1) %>%
  tbl_genomic()

tbl_gene
```

**Note: If you only want to analyzed data above a certain threshold, you will first need to summarize_by_gene() before passing to `subset_by_frequency()` or certain alterations may be omitted**


## Summarize Oncogenic Pathways

Often we want to analyze alterations on the pathway level. 

![](images/pathways.png){width="400px"}

 
## Summarize Oncogenic Pathways

{gnomeR} offers several default pathways that can be added with `add_pathways()`

```{r}
paths <- gnomeR::pathways %>% names()
paths
```

## Summarize Alteration Pathways

```{r }
#| output-location: column-fragment

path_df <- gene_binary %>%
  select(-naaccr_sex_code) %>%
  add_pathways() 

path_df %>%
  select(contains("pathway")) %>%
  tbl_summary() %>% 
  bold_labels()
```

## Analyzing Data: Pathways

You can also add a custom pathway:


```{r}

path_df <- gene_binary %>%
  add_pathways(custom_pathways = c("SPOP.mut", "FOXA1.mut")) 

path_df %>% select("pathway_custom") %>%
  tbl_summary()
```

<br>


**Note: You must specify `.mut`, `.Amp`, `.Del` for custom pathways**

## Comparing Alteration Frequencies Across Clinical Data


```{r}
#| output-location: column

tbl_gene <- gene_binary %>%
  subset_by_frequency(t = .1,
                      other_vars = naaccr_sex_code) %>%
  tbl_genomic(by = naaccr_sex_code) %>%
  bold_labels() 

tbl_gene
```


## Analyzing Data: Multiple Testing

- Because each hypothesis test has a probability of producing a type I error (falsely rejecting a null hypothesis that is true), performing a large number of hypothesis tests virtually guarantees the presence of type I errors among the findings.

- [Report tests with adjustment]{.emphasized}- Recommended to use false discovery rate adjustment as opposed to FWER (eg. bonferroni) as it controls for a low proportion of false positives, instead of guarding against making any false positive conclusion at all


::: aside
Reference: Goeman JJ, Solari A. Multiple hypothesis testing in genomics. Stat Med. 2014 May 20;33(11):1946-78. doi: 10.1002/sim.6082. Epub 2014 Jan 8. PMID: 24399688.
:::




## Analyzing Data: Multiple Testing


```{r}
#| output-location: column

tbl_gene <- gene_binary %>%
  subset_by_frequency(t = .1,
                      other_vars = naaccr_sex_code) %>%
  tbl_genomic(by = naaccr_sex_code) %>%
  bold_labels() %>%
  add_p() %>%
  add_q()

tbl_gene %>% knit_print()
```

## Visualize Data

```{r}
gnomeR::ggcomut(nsclc_cohort$cohort_mutations_extended)
```

## Visualize Data

```{r}
gnomeR::ggtopgenes(nsclc_cohort$cohort_mutations_extended)
```

## Additional Items/ Next Steps

- oncoKB
- oncoprints, etc 
- CNA?

- **Analyzing Tumor Mutation Burden Across Samples**
  - TMB (number of mutations per coding area) can differ depending on depth of sequencing. This can make this measure inconsistent between panels/institutions. 

- **OncoKB Annotation** - Maybe
  - Some studies may require oncoKB annotation of data

- CNA segmentation data???? - Maybe 

# Thank You! {background-color="#007CBA" style="text-align: center;"}
  

