---
format: 
  revealjs: 
    theme:  [default, style.scss]
    transition: fade
    slide-number: true
execute:
  echo: true 
  output: asis
  freeze: auto
  cache: true
editor: source
---

```{r}
#| echo: false
#| results: false
#| cache: false
#| 
set.seed(20230515)
 
knitr::opts_chunk$set(echo = TRUE, results = 'asis')

library(tidyverse)
library(gtsummary)
#library(synapser)
library(genieBPC)
library(gt)
library(gnomeR)

# let's check if reg gt tables work now. if so, ditch this
knit_print.gtsummary <- function(x, ...) {
   gtsummary::as_gt(x) |>
     gt::as_raw_html()
}

knit_print.gt_tbl <- function(x, ...) {
  gt::as_raw_html(x)
} 


knit_print.data.frame <- function(x, ...) {
  x %>% gt::gt() %>%
    gt::as_raw_html()
}

knit_print.tbl_df <- function(x, ...) {
    x %>% gt::gt() %>%
    gt::as_raw_html()
} 


registerS3method("knit_print", "gtsummary", knit_print.gtsummary)
registerS3method("knit_print", "gt_tbl", knit_print.gt_tbl)
registerS3method("knit_print", "data.frame", knit_print.data.frame)
registerS3method("knit_print", "tbl_df", knit_print.tbl_df)

#devtools::install_github("MSKCC-Epi-Bio/gnomeR")
# fill for font awesome icons
fa_fill <- "#606060"

```

```{r }
#| echo: false
#| results: false
#| 
genieBPC::set_synapse_credentials()


```

```{r}
#| echo: false
#| results: false
#| eval: false

nsclc_synapse_data <- pull_data_synapse("NSCLC", "v2.0-public")
save(nsclc_synapse_data, file = here::here("data", "nsclc_synapse_data.RData"))

```

```{r}
#| echo: false
#| results: false

load(here::here("data", "nsclc_synapse_data.RData"))

```

## Case Study

Using the cohort of patients who were diagnosed with Stage IV adenocarcinoma NSCLC, we will:

1)  [Process data]{.emphasized} into a ***n patients*** x ***p alterations*** matrix of events (0 = no alteration, 1 = alteration)

2)  [Summarize genomic alteration frequencies]{.emphasized} and analyze differences between males and females.

:::: {.columns}

::: {.column width="70%"}

```{r }
nsclc_cohort <- create_analytic_cohort(
  data_synapse = 
    nsclc_synapse_data$NSCLC_v2.0,
  stage_dx = c("Stage IV"),
  histology = "Adenocarcinoma",
  regimen_drugs =
    c("Carboplatin, Pemetrexed Disodium",
      "Cisplatin, Pemetrexed Disodium",
      "Bevacizumab, Carboplatin, Pemetrexed Disodium",
      "Bevacizumab, Cisplatin, Pemetrexed Disodium"),
  regimen_type = "Exact",
  regimen_order = 1,
  regimen_order_type = "within cancer",
  return_summary = TRUE
)


```

::: 

::: {.column width="30%"}

```{r}
#| echo: false
nsclc_cohort$cohort_pt_char %>%
  select(
         naaccr_sex_code) %>%
  tbl_summary() %>%
  bold_labels()
```
:::

::::

## Overview of Genomic Data

We will be processing and analyzing data on:

**1) Mutations**

```{r}
mutations <- nsclc_synapse_data$NSCLC_v2.0$mutations_extended
```

**1) Discrete Copy Number Alterations**

```{r}
cna <- nsclc_synapse_data$NSCLC_v2.0$cna
```

**1) Fusions**

```{r}
fusions <- nsclc_synapse_data$NSCLC_v2.0$fusions
```

::: aside
AACRA Data Guide: https://www.aacr.org/wp-content/uploads/2020/02/20200127_GENIE_Data_Guide_7.pdf
:::

# Processing Data {background-color="#007CBA" style="text-align: center;"}


## Issues When Processing Multi-Institutional Genomic Data

::: incremental
::: {.callout-note appearance="simple"}
1)  [Multiple Samples Per Patient]{.emphasized}
    -   We often need to select a single sample per patient for analyses
:::

::: {.callout-note appearance="simple"}
2)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies
:::

::: {.callout-note appearance="simple"}
3)  [Cohort Inclusion]{.emphasized}
    -   Samples with no alterations may be dropped when pulling data
:::

::: {.callout-note appearance="simple"}
4)  [Multi-Institutional Studies Use Several Gene Panels]{.emphasized}
    -   Samples may be sequenced using different panels therefore the non overlapping genes have to be annotated as missing
:::
:::

## Select One Sample Per Patient

::: {.callout-note appearance="simple"}
1)  [Multiple Samples Per Patient]{.emphasized}
    -   We often need to select a single sample per patient for analyses
:::

::: incremental
-   Patients can have many NGS values
-   We can use `select_unique_ngs()` to choose 1 per patient
-   This function prioritizes characteristics of interest and breath of genes sequenced
-   However, if patients only has one report, it will be returned regardless
:::

## [\|]{.emphasized} Select One Sample Per Patient {background-color="#fff2cc"}

::: {.callout-note appearance="simple"}
1)  [Multiple Samples Per Patient]{.emphasized}
    -   We often need to select a single sample per patient for analyses
    
:::



```{r }
#| echo: true


nrow(nsclc_cohort$cohort_ngs)

nsclc_samp <- select_unique_ngs(
  data_cohort = nsclc_cohort$cohort_ngs,
  oncotree_code = "LUAD",
  sample_type = "Metastasis",
  min_max_time = "max"
)

nrow(nsclc_samp)

```



![](images/coding-icons.png){.absolute bottom="0" left="0" width="100" height="65"}

## Format Data in Analysis-ready Matrix

::: incremental
-   Next we want to get our genomic data in an analysis-friendly format.

-   `create_gene_binary()` from {gnomeR} will give us a data frame of *n* patients by *p* alterations.

-   Alteration columns are denoted by the gene name if mutation (e.g. `TP53`) or gene name + .Amp, .fus, .Del (`TP53.Del`) for other alterations types.

-   Each cell will have `0` if no alteration, `1` if altered, or `NA` if that gene was not tested in that patient.
:::

```{r}
#| echo: false
#| message: false
#| include: false

reformat_cna <- gnomeR::pivot_cna_longer(nsclc_synapse_data$NSCLC_v2.0$cna)
reformat_fusions <- gnomeR::reformat_fusion(nsclc_synapse_data$NSCLC_v2.0$fusions)

nsclc_2_sample_panels <- nsclc_samp %>% 
  select(cpt_seq_assay_id, cpt_genie_sample_id) %>%
  rename(panel_id = cpt_seq_assay_id,
         sample_id = cpt_genie_sample_id) %>%
   mutate(panel_id = ifelse(!is.na(panel_id),
                               panel_id, "no"))

bin_mat <- gnomeR::create_gene_binary(
    mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
    cna = reformat_cna,
    fusion = reformat_fusions,
    samples = nsclc_2_sample_panels$sample_id,
    specify_panel = nsclc_2_sample_panels
  ) 
```

```{r }
#| echo: false
# sample of data
bin_mat[1:5, 1:7] %>% gt::gt()
```

## Get Data in Standardized Format

::: {.callout-note appearance="simple"}
2)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies!
:::

<br>

[{gnomeR}]{.emphasized} functions are designed to work with standard alteration data formats used in common platforms like cBioPortal.

We need to reformat GENIE CNA and fusions data to get it into this standard format.

::: aside

Documentation on data formats: https://docs.cbioportal.org/file-formats/

:::

## Get Data in Standardized Format

Format fusions to follow the cBioPortal standard:

::: {.columns}

::: {.column width="50%"}

[Before:]{.emphasized}

```{r}
#| eval: false
#| echo: true
nsclc_synapse_data$NSCLC_v2.0$fusions
```

```{r}
#| echo: false

positions <- c(1, 4, 5)
nsclc_synapse_data$NSCLC_v2.0$fusions %>% 
  select(all_of(positions))%>%
  arrange(Tumor_Sample_Barcode) %>% 
  filter(Tumor_Sample_Barcode == "GENIE-MSK-P-0004827-T01-IM5") %>%
  gt::gt() %>% gt::tab_style(
  style = cell_fill(color = 'lightcyan'), locations = cells_body(
    rows = Fusion == "XPO1-USP34 fusion"
  ))
```

:::

::: {.column width="50%"}

[After:]{.emphasized}

```{r }
reformat_fusions <- gnomeR::reformat_fusion(nsclc_synapse_data$NSCLC_v2.0$fusions)

```

```{r}
#| echo: false

reformat_fusions %>% head() %>%
  select(all_of(c(1, 2, 3, 6))) %>% gt::gt()

```

:::

:::




## Get Data in Standardized Format

Format CNA to follow the cBioPortal standard:

::: {.columns}

::: {.column width="50%"}

[Before:]{.emphasized}

```{r}
#| classes: .small-code
#| class-source: .small-code
nsclc_synapse_data$NSCLC_v2.0$cna[1:5, 1:5]
```


:::

::: {.column width="50%"}

[After:]{.emphasized}


```{r }
#| results: false
#| classes: .small-code
#| class-source: .small-code
gnomeR::pivot_cna_longer(
  nsclc_synapse_data$NSCLC_v2.0$cna) 

```


```{r}
#| echo: false

reformat_cna <- 
  gnomeR::pivot_cna_longer(
    nsclc_synapse_data$NSCLC_v2.0$cna)

reformat_cna[1:5, ]
```

:::

:::

::: aside
Documentation on data formats: https://docs.cbioportal.org/file-formats/
:::


## [\|]{.emphasized} Get Data in Standardized Format {background-color="#fff2cc"}

```{r}
reformat_fusions <- gnomeR::reformat_fusion(nsclc_synapse_data$NSCLC_v2.0$fusions)

nrow(reformat_fusions)
```

```{r }
reformat_cna <- gnomeR::pivot_cna_longer(nsclc_synapse_data$NSCLC_v2.0$cna)

nrow(reformat_cna)

```

![](images/coding-icons.png){.absolute bottom="0" left="0" width="100" height="65"}

## Format Data in Analysis-ready Matrix

:::{.incremental}
-   Data is now in standardized format and can be processed using {gnomeR} `create_gene_binary()`


-   We will add additional arguments to `create_gene_binary()` to help address remaining data processing issues
:::


[Basic code:]{.emphasized}

```{r  }
#| echo: true
#| eval: false
gnomeR::create_gene_binary(
  mutation = mutations,
  cna = reformat_cna,
  fusion = reformat_fusions)
```


## Cohort Inclusion {auto-animate="true"}

::: {.callout-note appearance="simple"}

3)  [Cohort Inclusion]{.emphasized}
    -   Samples with no alterations may be dropped when pulling raw genomic data
    
:::

<br>

::: {.columns}

::: {.column width="60%"}

```{r, `code-line-numbers`="2" }
#| echo: true
#| eval: false

gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = NULL,
  mutation = NULL,
  mut_type = NULL,
  cna = NULL,
  fusion = NULL,
  recode_aliases = NULL)






```

:::

::: {.column width="40%"}

The `samples` argument will ensure all study IDs have a row in resulting analysis data, even if they are not present in genomic files

:::

:::

## Not All Patients Tested on Same Panel

::: {.callout-note appearance="simple"}

4)  [Multi-Institutional Studies Use Several Gene Panels]{.emphasized}
    -   Samples may be sequenced using different panels therefore the non overlapping genes have to be annotated as missing
    
:::

<br>

::: {.columns}

::: {.column width="60%"}

```{r, `code-line-numbers`="3" }
#| column-location: column-fragment
#| echo: true
#| eval: false

gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = nsclc_panels,
  mutation = NULL,
  mut_type = NULL,
  cna = NULL,
  fusion = NULL,
  recode_aliases = NULL)
```

:::

::: {.column width="40%"}

The `specify_panels` argument can insert NAs when we know that gene was not tested for a specific set of patients.

:::

:::

## Not All Patients Tested on Same Panel

To use `specify_panels`, we first need to create a data frame indicating which patient IDs were sequenced on which panels. 


<br>

```{r}

nsclc_panels <- data.frame(
  sample_id = nsclc_samp$cpt_genie_sample_id,
  panel_id = nsclc_samp$cpt_seq_assay_id) %>% 
  mutate(panel_id = ifelse(!is.na(panel_id),
                               panel_id, "no"))

nsclc_panels %>% head() 
```


## Not All Patients Tested on Same Panel 

::: {.columns}

::: {.column width="50%"}

[Without Panel Annotation]{.emphasized}

```{r `code-line-numbers`="6" }
#| message: false
#| classes: .small-code
#| class-source: .small-code
binmat1 <- gnomeR::create_gene_binary(
  mutation = mutations,
  cna = reformat_cna,
  fusion = reformat_fusions,
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = "no")
```

```{r}
#| echo: false
binmat1 %>%
  filter(sample_id %in%
          c("GENIE-DFCI-004022-1313",
            "GENIE-DFCI-000013-8840",
            "GENIE-MSK-P-0002725-T01-IM3",
            "GENIE-MSK-P-0017722-T02-IM6"
          #  "GENIE-VICC-125866-unk-1"
            ))%>%
  select(1,3, 4, 6, 7) %>%
  left_join(nsclc_panels)%>%
  relocate(panel_id, .after = sample_id)%>%
  arrange(panel_id, sample_id)

```

:::

::: {.column width="50%"}

[With Panel Annotation]{.emphasized}

```{r `code-line-numbers`="6" }
#| message: false
#| classes: .small-code
#| class-source: .small-code
binmat2 <- gnomeR::create_gene_binary(
  mutation = mutations,
  cna = reformat_cna,
  fusion = reformat_fusions,
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = nsclc_panels)
```

```{r}
#| echo: false
binmat2 %>% filter(sample_id %in%
          c("GENIE-DFCI-004022-1313",
            "GENIE-DFCI-000013-8840",
            "GENIE-MSK-P-0002725-T01-IM3",
            "GENIE-MSK-P-0017722-T02-IM6"
          #  "GENIE-VICC-125866-unk-1"
          ))%>%
  select(1, 3, 4, 6, 7) %>%
  left_join(nsclc_panels)%>%
  relocate(panel_id, .after = sample_id)%>%
  arrange(panel_id, sample_id) 

```

:::

:::

## Ensure Gene Names Are Consistent Across Studies {.scrollable}

::: {.callout-note appearance="simple"}

1)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies!
    
:::



::: {.columns}

::: {.column width="50%"}

```{r, `code-line-numbers`="8"}
no_recode <- gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  mutation = mutations,
  cna = reformat_cna,
  fusion = reformat_fusions,
  specify_panel = nsclc_panels,
  recode_aliases = "no")
```

:::

::: {.column width="50%"}

```{r, `code-line-numbers`="8"}

recode <- gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  mutation = 
    nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = reformat_cna,
  fusion = reformat_fusions,
  specify_panel = nsclc_panels,
  recode_aliases = "impact")
```

:::

:::

<br>

```{r}
setdiff(names(no_recode), names(recode)) %>% head()
```

## [\|]{.emphasized} Process Data: Final Dataset {background-color="#fff2cc"}

Let's run `create_gene_binary()` with the `samples`, `specify_panel` and `recode_aliases` arguments.

First we create `nsclc_panels`:

```{r}
nsclc_panels <- data.frame(
  sample_id = nsclc_samp$cpt_genie_sample_id,
  panel_id = nsclc_samp$cpt_seq_assay_id) %>% 
  mutate(panel_id = ifelse(!is.na(panel_id),
                               panel_id, "no"))

```

Then run `create_gene_binary()`:

```{r}
gene_binary <- gnomeR::create_gene_binary(
  mutation = mutations,
  cna = reformat_cna,
  fusion = reformat_fusions,
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = nsclc_panels)
```

![](images/coding-icons.png){.absolute bottom="0" left="0" width="100" height="65"}

# Analyzing Data {background-color="#007CBA" style="text-align: center;"}

## Issues When Analyzing Multi-Institutional Genomic Data

:::: {.incremental}

::: {.callout-note appearance="simple"}

1)  [Multiple Testing and False Positives]{.emphasized}

-   Many hypothesis tests done simultaneously can lead to high rate of false positive findings.
-   Very low prevalence genes are often not very informative.
-   Choose a threshold (e.g. 1% or 5 %) *a prior* to limit number of hypothesis tests and consider reporting Report q-value (adjusted for multiple testing).

:::

::: {.callout-note appearance="simple"}

2)  [Limited Power To Detect Clinical Associations When Sparse Alterations]{.emphasized}

-   If biologically meaningful, you may want to summarize on Alteration, Gene or Pathway Level

:::

::::

```{r }
#| echo: false
#| results: false
#| message: false
gene_binary <- gnomeR::create_gene_binary(
  mutation = mutations,
  cna = reformat_cna,
  fusion = reformat_fusions,
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = nsclc_panels)
```

## Case Study

- We will use the processed binary data frame data (`gene_binary`) to summarize genomic alterations overall in the cohort, and by sex.

- First, we will need to join clinical data on `sex` to genomic data

## [\|]{.emphasized} Add Clinical Variable To Data {background-color="#fff2cc"}

::: {.columns}

::: {.column width="60%"}

```{r }
#| results: false
#| 
patient_index <-  nsclc_cohort$cohort_ngs %>%
  select(record_id, cpt_genie_sample_id)

select_clinical <- nsclc_cohort$cohort_pt_char %>%
  select(record_id, naaccr_sex_code) %>%
  left_join(patient_index) 

gene_binary <- gene_binary %>% 
  left_join(select_clinical, by = c("sample_id"= "cpt_genie_sample_id")) %>%
  select(-record_id)

gene_binary <- gene_binary %>% 
  select(sample_id, naaccr_sex_code, everything())

gene_binary %>%
  select(naaccr_sex_code) %>%
  tbl_summary()
```

:::

::: {.column width="40%"}

```{r }
#| echo: false
#| 
gene_binary %>%
  select(naaccr_sex_code) %>%
  tbl_summary()
```

:::

:::

![](images/coding-icons.png){.absolute bottom="0" left="0" width="100" height="65"}

## Subset By a Prevalence Threshold

::: {.callout-note appearance="simple"}

1)  [Multiple Testing and False Positives]{.emphasized}

-   Very low prevalence genes are often not very informative. Choose a threshold (e.g. 1% or 5 %) *a prior* to limit number of hypothesis tests.

:::

<br>

-   Use `subset_by_frequency()` to subset genes above a given threshold. `t` indicates a threshold between 0 (`t = 0`) and 100% (`t = .1`) prevalence.

-   `other_vars` retains the clinical variable of interest in the resulting data set.

## [\|]{.emphasized} Subset By 40% Threshold {background-color="#fff2cc"}

```{r}
ncol(gene_binary)

nscl_subset <- gene_binary %>%
  subset_by_frequency(t = .4, other_vars = naaccr_sex_code)

ncol(nscl_subset)
```

![](images/coding-icons.png){.absolute bottom="0" left="0" width="100" height="65"}

## Subset by a Panel

Use `subset_by_panel()` to subset only genes in a given panel.

```{r}
ncol(gene_binary)

nscl_subset_panel <- gene_binary %>%
  subset_by_panel(panel_id = 'IMPACT300', other_vars = naaccr_sex_code)

ncol(nscl_subset_panel)
```

## Summarize Alterations with tbl_genomic()

-   `tbl_genomic()` is a wrapper function for `gtsummary::tbl_summary()` specifically designed for presenting genomic data:

-   You can use any {gtsummary} function on top of `tbl_genomic()` to customize table further (e.g. `bold_labels()`)

## [\|]{.emphasized} Summarize Alterations with tbl_genomic {background-color="#fff2cc"}

Create a simple tbl_genomic object, then bold the labels.

```{r}
#| output-location: column

nscl_subset %>% 
  select(-naaccr_sex_code) %>%
  tbl_genomic() %>%
  bold_labels() 


```

## Summarize Genes with tbl_genomic()

You may want to analyze on the gene level only. Use `summarize_by_gene()` first, then pass to `tbl_genomic()`:

```{r}
#| output-location: column

tbl_gene <- gene_binary %>%
  select(-naaccr_sex_code) %>%
  summarize_by_gene() %>%
  subset_by_frequency(t = .4) %>%
  tbl_genomic()

tbl_gene
```

## Summarize Genes with tbl_genomic()

**Note: If you only want to analyzed data above a certain threshold, you will first need to summarize_by_gene() before passing to `subset_by_frequency()` or certain alterations may be omitted**


```{r}
#| output-location: column

tbl_gene <- gene_binary %>%
  select(-naaccr_sex_code) %>%
  summarize_by_gene() %>%
  subset_by_frequency(t = .4) %>%
  tbl_genomic()

tbl_gene
```


## Summarize Oncogenic Pathways

::: {.callout-note appearance="simple"}

2)  [Limited Power To Detect Clinical Associations When Sparse Alterations]{.emphasized}

-   If biologically meaningful, you may want to summarize on Alteration, Gene or Pathway Level

:::

Often we want to analyze alterations on the pathway level.

![](images/pathways.png){.absolute bottom="15" left="250" width="400px"}

## Summarize Oncogenic Pathways

::: {.callout-note appearance="simple"}

2)  [Limited Power To Detect Clinical Associations When Sparse Alterations]{.emphasized}

-   If biologically meaningful, you may want to summarize on Alteration, Gene or Pathway Level

:::

<br>

{gnomeR} offers several default pathways that can be added with `add_pathways()`

<br>

```{r}
paths <- gnomeR::pathways %>% names()
paths
```


## Summarize Oncogenic Pathways

You can also add a custom pathway:

```{r}

path_df <- gene_binary %>%
  add_pathways(custom_pathways = c("SPOP.mut", "FOXA1.mut")) 

path_df %>% select("pathway_custom") %>%
  tbl_summary()
```

<br>

**Note: You must specify `.mut`, `.Amp`, `.Del` for custom pathways**


## [\|]{.emphasized} Summarize Alteration Pathways {background-color="#fff2cc"}

```{r }
#| output-location: column-fragment

path_df <- gene_binary %>%
  select(-naaccr_sex_code) %>%
  add_pathways() 

path_df %>%
  select(contains("pathway")) %>%
  tbl_summary() %>% 
  bold_labels()
```

![](images/coding-icons.png){.absolute bottom="0" left="0" width="100" height="65"}


## Comparing Alteration Frequencies Across Clinical Data

We can easily compare frequencies by sex using the `by` argument:


::: {.columns}

::: {.column width="50%"}


```{r}
#| results: false

tbl_gene <- gene_binary %>%
  subset_by_frequency(
    t = .4,
    other_vars = naaccr_sex_code) %>%
  tbl_genomic(by = naaccr_sex_code) %>%
  bold_labels() 

tbl_gene
```

:::

::: {.column width="50%"}

```{r }
#| echo: false
#|
tbl_gene

```

:::

::::

## Comparing Alteration Frequencies Across Clinical Data

::: {.callout-note appearance="simple"}
1)  [Multiple Testing and False Positives]{.emphasized}
:::


```{r }

gene_binary %>%
  subset_by_frequency(
    t = .4,
    other_vars = naaccr_sex_code) %>%
  tbl_genomic(
    by = naaccr_sex_code) %>%
  bold_labels() %>%
  add_p() %>%
  add_q()


```


## [|]{.emphasized} Comparing Alteration Frequencies Across Clinical Data {background-color="#fff2cc"}

```{r}

tbl_gene <- gene_binary %>%
  subset_by_frequency(
    t = .4,
    other_vars = naaccr_sex_code) %>%
  tbl_genomic(by = naaccr_sex_code) %>%
  bold_labels() %>%
  add_p() %>%
  add_q()

tbl_gene 

```


![](images/coding-icons.png){.absolute bottom="0" left="0" width="100" height="65"}


## Visualize Data

```{r}
gnomeR::ggcomut(nsclc_cohort$cohort_mutations_extended)
```

## Visualize Data

```{r}
gnomeR::ggtopgenes(nsclc_cohort$cohort_mutations_extended)
```

## Additional Items & Next Steps

- Additional visualizations and color palettes useful for genomic data are available in {gnomeR} package

- Some data may require additional QA-ing. See {gnomeR vignette} for more information:  https://mskcc-epi-bio.github.io/gnomeR/articles/qa-impact-data.html 

-   It may be appropriate to oncoKB annotate your data and only analyze oncogenic mutations (see oncoKB.org for more information)

-   Some projects may utilize CNA Segmentation data. See gnomeR vignette for more information: https://mskcc-epi-bio.github.io/gnomeR/ 




# Thank You! {background-color="#007CBA" style="text-align: center;"}
