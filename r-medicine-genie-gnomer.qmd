---
format: 
  revealjs: 
    theme:  [default, style.scss]
    transition: fade
    slide-number: true
execute:
  echo: true 
  output: asis
  freeze: auto
editor: source
---


# Analyzing GENIE Genomic Data with {genieBPC} and {gnomeR} {background-color="#007CBA" style="text-align: center;"}

```{r}
#| echo: false
#| results: false
set.seed(20230515)
 
knitr::opts_chunk$set(echo = TRUE, results = 'asis')

library(tidyverse)
library(gtsummary)
#library(synapser)
library(genieBPC)
library(gt)
library(gnomeR)

# let's check if reg gt tables work now. if so, ditch this
knit_print.gtsummary <- function(x, ...) {
   gtsummary::as_gt(x) |>
     gt::as_raw_html()
}

knit_print.gt_tbl <- function(x, ...) {
  gt::as_raw_html(x)
} 


registerS3method("knit_print", "gtsummary", knit_print.gtsummary)
registerS3method("knit_print", "gt_tbl", knit_print.gt_tbl)

#devtools::install_github("MSKCC-Epi-Bio/gnomeR")
# fill for font awesome icons
fa_fill <- "#606060"

genieBPC::set_synapse_credentials()


```

![](images/gnomeR-logo.png){width="250px"}

## {genieBPC} + {gnomeR} Pipeline

![](images/genie-gnomer-pipline.png)

```{r}
#| echo: false
#| results: false
#| eval: false

nsclc_synapse_data <- pull_data_synapse("NSCLC", "v2.0-public")
save(nsclc_synapse_data, file = here::here("data", "nsclc_synapse_data.RData"))

```

```{r}
#| echo: false
#| results: false

load(here::here("data", "nsclc_synapse_data.RData"))

```

## Case Study

Using the cohort of patients who were diagnosed with Stage IV adenocarcinoma NSCLC, we will summarize alterations including mutations, CNA and fusions, and analyze differences in alteration frequencies between Males and Females.


```{r }
#| output-location: column
#| 
nsclc_cohort <- create_analytic_cohort(
  data_synapse = nsclc_synapse_data$NSCLC_v2.0,
  stage_dx = c("Stage IV"),
  histology = "Adenocarcinoma",
  regimen_drugs = c("Carboplatin, Pemetrexed Disodium",
                    "Cisplatin, Pemetrexed Disodium",
                    "Bevacizumab, Carboplatin, Pemetrexed Disodium",
                    "Bevacizumab, Cisplatin, Pemetrexed Disodium"),
  regimen_type = "Exact",
  regimen_order = 1,
  regimen_order_type = "within cancer",
  return_summary = TRUE
)

nsclc_cohort$cohort_pt_char %>%
  select(record_id, institution, naaccr_sex_code, age_last_fu_yrs) %>% 
  select(-record_id) %>%
  tbl_summary() %>%
  bold_labels()
```

## Overview of Genomic Data

We will be processing and analyzing data on:

1) Mutations

```{r}
mutations <- nsclc_synapse_data$NSCLC_v2.0$mutations_extended
```

1) Discrete Copy Number Alterations

```{r}
cna <- nsclc_synapse_data$NSCLC_v2.0$cna
```

1) Fusions

```{r}
fusions <- nsclc_synapse_data$NSCLC_v2.0$fusions
```

# Processing Data {background-color="#007CBA" style="text-align: center;"}

## Issues When Processing Multi-Institutional Genomic Data
        
::: {.incremental}

1) [Multiple Samples Per Patient]{.emphasized}
    - We often need to select a single sample per patient for analyses
    
1)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies!
    
1)  [Cohort Inclusion]{.emphasized}
    -   Samples with no alterations may be dropped when pulling data
    
1) [Multi-Institutional Studies Use Several Gene Panels]{.emphasized}
    -   Samples may be sequenced using different panels therefore the non overlapping genes have to be annotated as missing

1)  [Missing Data in Mutation Status]{.emphasized}

:::

:::{.notes}
1)  **Research Samples vs. IMPACT Samples**
    -   Some samples may be sequenced outside MSK or using different panels.
    -   [Check panels and annotate NAs accordingly]{.emphasized}
2)  **Cohort Inclusion**
    -   Samples with no alterations may be dropped when pulling data
    -   [Use `samples` arg of `create_gene_binary()` and check data]{.emphasized}
3)  **Data Formats & Gene Standards Often Inconsistent**
    -   Column names, data formats and gene names may differ between studies or even within studies!
    -   [Reformat data as necessary and check gene aliases (`recode_aliases = TRUE`)]{.emphasized}
4)  **Missing Data in Mutation Status**
    -   Mutation Status is sometimes missing data.
    -   [Check Mutation Status column]{.emphasized}
    
:::


## Select One Sample Per Patient

1) [Multiple Samples Per Patient]{.emphasized}
    - We often need to select a single sample per patient for analyses
    
::: {.incremental}
- Patients can have many NGS values
- We can use `select_unique_ngs()` to choose 1 per patient
- If multiple match the criteria, random sample taken

::: 

```{r}
#| echo: true
nsclc_samp <- select_unique_ngs(
  data_cohort = nsclc_cohort$cohort_ngs,
  oncotree_code = "LUAD",
  sample_type = "Metastasis",
  min_max_time = "max"
)

```



## Format Data in Analysis-ready Matrix

We want to get our genomic data in an analysis-friendly format. 

::: {.incremental}
- `create_gene_binary()` from {gnomeR} will give us a data frame of *n* patients by *p* alterations. 

- Alteration columns are denoted by the gene name alone if mutation (e.g. `TP53`) or gene name + .Amp, .fus, .Del (`TP53.Del`).

- Each cell will have 0 if no alteration, 1 if altered, or NA if that gene was not tested in that patient. 
:::

```{r}
#| echo: false
#| message: false
#| include: false

cna_synapse_long <- gnomeR::pivot_cna_longer(nsclc_synapse_data$NSCLC_v2.0$cna)
reformat_fusions <- gnomeR::reformat_fusion(nsclc_synapse_data$NSCLC_v2.0$fusions)

nsclc_2_sample_panels <- nsclc_samp %>% 
  select(cpt_seq_assay_id, cpt_genie_sample_id) %>%
  rename(panel_id = cpt_seq_assay_id,
         sample_id = cpt_genie_sample_id) %>%
   mutate(panel_id = ifelse(!is.na(panel_id),
                               panel_id, "no"))

bin_mat <- gnomeR::create_gene_binary(
    mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
    cna = cna_synapse_long,
    fusion = reformat_fusions,
    samples = nsclc_2_sample_panels$sample_id,
    specify_panel = nsclc_2_sample_panels
  ) 
```

```{r }
#| echo: false
# sample of data
bin_mat[1:5, 1:7] %>% gt::gt()
```

## Get Data in Standardized Format

2)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies!



We may need to reformat data to get it into a more standard format first

## Get Data in Standardized Format

Format fusions to follow the cBioPortal standard:

```{r}
#| echo: false

positions <- c(1, 4, 5)
nsclc_synapse_data$NSCLC_v2.0$fusions %>% 
  select(all_of(positions))%>%
  arrange(Tumor_Sample_Barcode) %>% 
  filter(Tumor_Sample_Barcode == "GENIE-MSK-P-0004827-T01-IM5") %>%
  gt::gt() %>% gt::tab_style(
  style = cell_fill(color = 'lightcyan'), locations = cells_body(
    rows = Fusion == "XPO1-USP34 fusion"
  ))
```

```{r }
reformat_fusions <- gnomeR::reformat_fusion(nsclc_synapse_data$NSCLC_v2.0$fusions)

```


```{r}
#| echo: false

reformat_fusions %>% head() %>% select(all_of(c(1, 2, 3, 6))) %>% gt::gt()

```



## Get Data in Standardized Format

Format CNA to follow the cBioPortal standard:

```{r}
nsclc_synapse_data$NSCLC_v2.0$cna[1:5, 1:5] %>% gt()
```

```{r }
cna_synapse_long <- gnomeR::pivot_cna_longer(nsclc_synapse_data$NSCLC_v2.0$cna)

cna_synapse_long[1:5, ] %>%
  gt()
```

## Format Data in Analysis-ready Matrix

`create_gene_binary()` has arguments to help us address data processing issues


[Basic code:]{.emphasized}

```{r, `code-line-numbers`="|2-4" }
#| echo: true
#| eval: false
gnomeR::create_gene_binary(
  mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions)
```

## Cohort Inclusion {auto-animate="true"}

3)  [Cohort Inclusion]{.emphasized}
    -   Samples with no alterations may be dropped when pulling raw genomic data
    
`samples` argument will ensure all study IDs have a row in resulting analysis data, even if they are not present in genomic files

:::: {.columns}

::: {.column width="60%"}

```{r, `code-line-numbers`="2" }
#| echo: true
#| eval: false

gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = NULL,
  mutation = NULL,
  mut_type = NULL,
  cna = NULL,
  fusion = NULL,
  recode_aliases = NULL)
```

:::

::: {.column width="40%"}

```{r}
#| echo: false
nsclc_samp %>% select(cpt_seq_assay_id) %>% count(cpt_seq_assay_id)%>% gt::gt()
```
:::

::::

## Not All Patients Tested on Same Panel

4) [Multi-Institutional Studies Use Several Gene Panels]{.emphasized}
    -   Samples may be sequenced using different panels therefore the non overlapping genes have to be annotated as missing


`specify_panels` argument can insert NAs when we know that gene was not tested for a specific set of patients. 


```{r, `code-line-numbers`="3" }
#| column-location: column-fragment
#| echo: true
#| eval: false

gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = nsclc_panels,
  mutation = NULL,
  mut_type = NULL,
  cna = NULL,
  fusion = NULL,
  recode_aliases = NULL)
```


## Not All Patients Tested on Same Panel

To use `specify_panels`, we first need to pass a dataframe indicating which patient IDs were sequenced on which panels:

```{r}
#| echo: true

nsclc_panels <- data.frame(
  sample_id = nsclc_samp$cpt_genie_sample_id,
  panel_id = nsclc_samp$cpt_seq_assay_id) %>% 
  mutate(panel_id = ifelse(!is.na(panel_id),
                               panel_id, "no"))

nsclc_panels %>% head() %>% gt()
```


## Not All Patients Tested on Same Panel

:::: {.columns}


::: {.column width="50%"}

```{r }
#| message: false
binmat1 <- gnomeR::create_gene_binary(
  nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = "no")

binmat1[1:5, 1:5] %>% gt()
```

:::

::: {.column width="50%"}

```{r }
#| message: false
binmat2 <- gnomeR::create_gene_binary(
  nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  samples = nsclc_samp$cpt_genie_sample_id,
  specify_panel = nsclc_panels)

binmat2[1:5, 1:5] %>% gt() 
```

:::

::::



## Ensure Gene Names Are Consistent Across Studies {.scrollable}

1)  [Data Formats & Gene Standards Often Inconsistent]{.emphasized}
    -   Column names, data formats and gene names may differ between studies or even within studies!
    
```{r, `code-line-numbers`="8"}
#| eval: true

test <- gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  specify_panel = nsclc_panels,
  recode_aliases = "no")

test_recode <- gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  specify_panel = nsclc_panels,
  recode_aliases = "impact")
```

```{r}
ncol(test)
ncol(test_recode)

```

## Process Data: View messages

```{r, `code-line-numbers`="8" }
#| eval: true
#| echo: false

gene_binary <-  gnomeR::create_gene_binary(
  samples = nsclc_samp$cpt_genie_sample_id,
  mutation = nsclc_synapse_data$NSCLC_v2.0$mutations_extended,
  cna = cna_synapse_long,
  fusion = reformat_fusions,
  specify_panel = nsclc_panels,
  recode_aliases = "impact")

gene_binary %>%
  select(all_of(1:10))%>%
  slice(1:5) %>%
  gt()

```

  
# Analyzing Data {background-color="#007CBA" style="text-align: center;"}

```{r}
#| echo: false
#| results: false


nscl_analysis <- gnomeR::create_gene_binary(
  mutation = gnomeR::mutations,
  cna = gnomeR::cna,
  fusion = gnomeR::sv)

```

## {genieBPC} + {gnomeR} Pipeline

![](images/genie-gnomer-pipline.png)


## Analyzing Data: Issues/Steps To Address

1) **Multiple Testing and False Positives**
  - Very low prevalence genes are often not very informative. Choose a threshold (e.g. 1% or 5 %) _a prior_ to limit number of tests. 
- Report q-value (adjusted for multiple testing)

1) **Limited Power To Detect With Sparse Alterations** 
  - You may want to summarize on Alteration, Gene or Pathway Level
  

## Analyzing Data: Subset By a Prevalence Threshold

Use `subset_by_frequency()` to subset genes above a given threshold

```{r}
ncol(nscl_analysis)

nscl_subset_05 <- nscl_analysis %>%
  subset_by_frequency(t = .05)

ncol(nscl_subset_05)

nscl_subset <- nscl_analysis %>%
  subset_by_frequency(t = .1)

ncol(nscl_subset)
```

## Analyzing Data: Subset by a Panel

Use `subset_by_panel()` to subset only genes in a given panel. 

```{r}
ncol(nscl_analysis)

nscl_subset_panel <- nscl_analysis %>%
  subset_by_panel(panel_id = 'IMPACT300')

ncol(nscl_subset_panel)
```


## Analyzing Data: Summarize Alterations with tbl_genomic()

`tbl_genomic()` is a wrapper function for `gtsummary::tbl_summary()` specifically 
designed for presenting genomic data:

```{r}
#| output-location: column

nscl_subset %>% 
  tbl_genomic()
```

## Analyzing Data: Summarize Genes with tbl_genomic()

You may want to analyze on the gene level only. Use `summarize_by_gene()` first, 
then pass to `tbl_genomic()`:

```{r}
#| output-location: column

tbl_gene <- nscl_analysis %>%
  summarize_by_gene() %>%
  subset_by_frequency(t = .1) %>%
  tbl_genomic()

tbl_gene
```

**Note: If you only want to analyzed data above a certain threshold, you will first need to summarize_by_gene() before passing to `subset_by_frequency()` or certain alterations may be omitted**


## Analyzing Data: Pathways

Often we want to analyze alterations on the pathway level. 

{gnomeR} offers several default pathways that can be added with `add_pathways()`

```{r}
paths <- gnomeR::pathways %>% names()
paths
```

## Analyzing Data: Pathways

```{r }
#| output-location: column

path_df <- nscl_analysis %>%
  add_pathways() 

path_df %>%
  select(contains("pathway")) %>%
  tbl_summary() %>% 
  bold_labels()
```

## Analyzing Data: Pathways

You can also add a custom pathway:


```{r}

path_df <- nscl_analysis %>%
  add_pathways(custom_pathways = c("SPOP.mut", "FOXA1.mut")) 

path_df %>% select("pathway_custom") %>%
  tbl_summary()
```

<br>


**Note: You must specify `.mut`, `.Amp`, `.Del` for custom pathways**

## Analying Data: Comparing Alteration Frequencies Across Clinical Data

WHAT CLINICAL VARIABLE SHOULD WE USE?

```{r}

```


## Analyzing Data: Multiple Testing

- Because each hypothesis test has a probability of producing a type I error (falsely rejecting a null hypothesis that is true), performing a large number of hypothesis tests virtually guarantees the presence of type I errors among the findings.

- [Report tests with adjustment]{.emphasized}- Recommended to use false discovery rate adjustment as opposed to FWER (eg. bonferroni) as it controls for a low proportion of false positives, instead of guarding against making any false positive conclusion at all

- Reference: Goeman JJ, Solari A. Multiple hypothesis testing in genomics. Stat Med. 2014 May 20;33(11):1946-78. doi: 10.1002/sim.6082. Epub 2014 Jan 8. PMID: 24399688.

## Analyzing Data: Multiple Testing

 ADD_Q() once we have clinical 

```{r}
#| output-location: column
#| 
tbl_gene <- nscl_analysis %>%
  summarize_by_gene() %>%
  subset_by_frequency(t = .1) %>%
  tbl_genomic()

tbl_gene
```



## Analyzing Data: Data Visualization

- could also mention color palettes 
- CNA heatmap?
  
## Summary
  
## Misc
  - oncoKB
- oncoprints, etc 
- CNA?

3) **Analyzing Tumor Mutation Burden Across Samples**
  - TMB (number of mutations per coding area) can differ depending on depth of sequencing. This can make this measure inconsistent between panels/institutions. 

4) **OncoKB Annotation** - Maybe
  - Some studies may require oncoKB annotation of data

5) CNA segmentation data???? - Maybe 

  

